apply plugin: 'java'
apply plugin: 'groovy'

repositories {
  mavenCentral()
}

dependencies {
  groovy 'org.codehaus.groovy:groovy:1.7.5'
  runtime 'org.liquibase:liquibase-core:2.0.1'
  runtime 'mysql:mysql-connector-java:5.1.9'
}

/*
databases {
  development {
    driver = ''
    url = ''
    username = ''
    password = ''
  }
  test {

  }
  production {

  }
}

schemas {
  main {
    changelog: [ main-changelog.groovy, migration-changelog.groovy, reference-changelog.groovy ]
  }
}
*/

def databaseUrl = null
def databaseUsername = null
def databasePassword = null
def changeLogFile = null

task('setupLiquibaseProperties') << {
  def propertiesFile = new File('database.properties')
  if(propertiesFile.exists()) {
    def properties = new Properties()
    properties.load(new FileInputStream(propertiesFile))
    databaseUrl = properties.url
    databaseUsername = properties.username
    databasePassword = properties.password
    changeLogFile = properties['change.log.file'] ?: System.getProperty('change.log.file')
  }
}


task('generateChangeLog', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'generateChangeLog'

  runLiquibase(argList)
}


task('changeLogSync', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'changeLogSync'

  runLiquibase(argList)
}


task('update', dependsOn: 'setupLiquibaseProperties') << {
  liquibaseUpdate(databaseUrl, databaseUsername, databasePassword, changeLogFile, false)
}

task('updateSQL', dependsOn: 'setupLiquibaseProperties') << {
  liquibaseUpdate(databaseUrl, databaseUsername, databasePassword, changeLogFile, true)
}

task('rollback', dependsOn: 'setupLiquibaseProperties') << {
  liquibaseRollback(databaseUrl, databaseUsername, databasePassword, changeLogFile, false)
}

task('rollbackSQL', dependsOn: 'setupLiquibaseProperties') << {
  liquibaseRollback(databaseUrl, databaseUsername, databasePassword, changeLogFile, true)
}

task('futureRollbackSQL', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'futureRollbackSQL'
  
    runLiquibase(argList)
}

task('status', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'status'
  
    runLiquibase(argList)
}

task('validate', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'validate'
  
    runLiquibase(argList)
}

task('changelogSync', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'changelogSync'
  
    runLiquibase(argList)
}

task('changelogSyncSQL', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'changelogSyncSQL'
  
    runLiquibase(argList)
}

task('listLocks', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'listLocks'
  
    runLiquibase(argList)
}

task('releaseLocks', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'releaseLocks'
  
    runLiquibase(argList)
}

task('markNextChangesetRan', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'markNextChangesetRan'
  
    runLiquibase(argList)
}

task('dropAll', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'dropAll'
  
    runLiquibase(argList)
}

task('clearChecksums', dependsOn: 'setupLiquibaseProperties') << {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'clearChecksums'
  
    runLiquibase(argList)
}

task('diff', dependsOn: 'setupLiquibaseProperties') << {
  def referenceUrl = System.getProperty('referenceUrl')
  def referenceUsername = System.getProperty('referenceUsername')
  def referencePassword = System.getProperty('referencePassword')
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}", 
  				 "--referenceUrl=${referenceUrl}", "--referenceUsername=${referenceUsername}", "--referencePassword=${referencePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'diff'
  
    runLiquibase(argList)
}


task('tag', dependsOn: 'setupLiquibaseProperties') << {
  def tag = System.getProperty('tag')
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'tag'
  argList << tag

  runLiquibase(argList)
}


task('dbDoc', dependsOn: 'setupLiquibaseProperties') << {
  def dir = System.getProperty('dir')
  def docDir = 'build/database/docs'
  if(dir) {
     docDir = dir
  } 
  ant.mkdir(dir: docDir)
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  argList << 'dbdoc'
  argList << docDir

  runLiquibase(argList)
}

def liquibaseRollback(databaseUrl, databaseUsername, databasePassword, changeLogFile, dryRun) {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  def arg = 'rollback'
  def tag = System.getProperty('tag')
  def count = System.getProperty('count')
  def date = System.getProperty('date')
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }

  if(count) {
    arg = arg + 'Count'
  } else if(date) {
    arg = arg + 'ToDate'
  }
  if(dryRun) {
    arg = arg + 'SQL'
  }
  
  argList << arg
 
  if(count) {
    argList << count
  } else if(date) {
    argList << date
  } else {
    argList << tag
  }

  runLiquibase(argList)
}

def liquibaseUpdate(databaseUrl, databaseUsername, databasePassword, changeLogFile, dryRun) {
  def argList = ["--url=${databaseUrl}", "--username=${databaseUsername}", "--password=${databasePassword}"]
  def arg = 'update'
  def count = System.getProperty('count')
  if(changeLogFile) {
    argList << "--changeLogFile=${changeLogFile}"
  }
  if(count) {
    arg = arg + 'Count'
  }
  if(dryRun) {
    arg = arg + 'SQL'
  }
 
  argList << arg 
 
  if(count) {
    argList << count
  }

  runLiquibase(argList)
}


def runLiquibase(List argList) {
  def contexts = System.getProperty('contexts')
  if(contexts){
    argList[4..<4] = "--contexts=${contexts}"
  }
  javaexec {
    main = 'liquibase.integration.commandline.Main'
    classpath = sourceSets.main.runtimeClasspath
    args = argList
  }
}


def runLiquibase(Map argMap, Object... argList) {
  def contexts = System.getProperty('contexts')
  if(contexts){
    argList[4..<4] = "--contexts=${contexts}"
  }
  javaexec {
    main = 'com.augusttechgroup.liquibase.liquibase'
    classpath sourceSets.main.runtimeClasspath, sourceSets.main.classesDir
  }
  javaexec {
    main = 'liquibase.integration.commandline.Main'
    println sourceSets.main.runtimeClasspath
    classpath = sourceSets.main.runtimeClasspath
    args = argMap.collect { name, value -> "--${name}=${value}" } + argList.toList()
  }
}